#! /usr/bin/env sh
# (C) Martin V\"ath <martin@mvath.de>

Echo() {
	printf '%s\n' "${*}"
}

Error() {
	Echo "${0##*/}: ${*}" >&2
}

Exit() {
	exit ${1}
}

Title() {
Title() {
:
}
	case ${titleopt} in
	*-*)	return;;
	esac
	command -v title >/dev/null 2>&1 || return 0
TitleVerbose() {
:
}
Exit() {
	exitstatus=${1:-${?}}
	TitleVerbose
	exit ${exitstatus}
}
TitleInit() {
. title "${@}"
}
	TitleInit ${titleopt:+"-${titleopt}"} -- "${@}"
}

TitleInfo() {
	Title "${0##*/}: ${*}"
}

Die() {
	Error "${*}"
	Exit 1
}

Usage() {
	Echo \
"Usage: ${0##*/} [option] status|restart|start|stop|STOP|zap [masks]
Show the status of all squash_* initscripts or (re)start|stop them.
If [masks] are given only the squash_[masks] initscripts are considered;
an empty [masks] is equivalent to '*'.
Options:
-s  Squash data on stop/restart even if THRESHOLD is not reached.
    This is done by temporarily creating \$DIR_CHANGE/.do-save
    if there is new data.
-n  Avoid squashing data on stop/restart.
    This is done by temporarily creating \$DIR_CHANGE/.no-save
    if changes would be saved. This option deactivates -s
-f  With restart: restart also those scripts which would not save any data.
    If combined with -s, \$DIR_CHANGE/.do-save is created temporarily
    even if there is no new data.
    If combined with -n,  \$DIR_CHANGE/.no-save is created temporarily.
-k  With stop or restart, \$DIR_CHANGE/.No-save is created temporarily.
    This means that \$DIR_CHANGE will be killed without re-squashing!
    Use with extreme care!
-a  Execute matching squash_[masks] scripts in alphabetic order.
    Without this option, the order is that of [masks].
-E  Do not skip rest after first error
-T[pPfHsS-] pass option(s) to the title script; - means no title.
    p is the default
-e  Cancel previous -E (i.e. stop at first error; this is the default).
-S  Cancel previous -s
-N  Cancel previous -n
-F  Cancel previous -f
-K  Cancel previous -k
-A  Cancel previous -a
Alias/shortcuts:
Instead of \"status\" you can also say \"show\", \"print\", \"info\", \"list\".
All these can be abbreviated by their first letters until unique,
e.g. \"sh\" or \"sho\" instead of \"show\" or \"z\" instead of \"zap\"."
	Exit ${1:-1}
}

force=false
error_skip=:
save_force=false
keep_force=false
kill_force=false
titleopt=p
alpha_order=false
OPTIND=1
while getopts 'sSnNfFkKeET:aAh?' opt
do	case ${opt} in
	s)	save_force=:;;
	S)	save_force=false;;
	n)	keep_force=:;;
	N)	keep_force=false;;
	f)	force=:;;
	F)	force=false;;
	k)	kill_force=:;;
	K)	kill_force=false;;
	e)	error_skip=:;;
	E)	error_skip=false;;
	T)	titleopt=${titleopt}${OPTARG};;
	a)	alpha_order=:;;
	A)	alpha_order=false;;
	*)	Usage 0;;
	esac
done
shift $(( ${OPTIND} - 1 ))

case ${titleopt} in
*[!pPfHsS-]*)
	Usage;;
esac

PrintInit() {
	printf "%-${max_len:-40}s " "${*}"
}

PrintComment() {
	Echo "# ${*}"
}

PrintAction() {
	printf '%-8s' "${1}"
	[ ${#} -gt 1 ] || return
	shift
	PrintComment "${*}"
}

PrintNoSave() {
	PrintAction 'stop'
	${1} || need_result=`"${2}" -q need_squash 2>&1`
	case ${need_result} in
	0)	PrintComment 'is unmodified';;
	1)	nosave=:
		PrintComment 'will not re-squash changes';;
	*)	PrintComment "error: ${a}";;
	esac
}

StatusRestart() {
	statusres=`"${1}" -q have_kill 2>&1`
	case ${statusres} in
	0)	PrintAction 'restart' 'changes will be re-squashed';;
	1)	PrintAction 'restart' 'changes will be deleted';;
	*)	Error "error: ${statusres}"; return 1;;
	esac
	return 0
}

Status() {
	PrintInit "${1}"
	if ! "${1}" -q status
	then	PrintAction 'start' 'initscript was not started'
		return 0
	fi
	statusres=`"${1}" -q will_squash 2>&1`
	case ${statusres} in
	0)	PrintNoSave false "${1}";;
	1)	StatusRestart "${1}" || return 1;;
	*)	Error "error: ${statusres}"; return 1;;
	esac
	return 0
}

NoTemp() {
	dosave_file=
	nosave_file=
	kill_file=
}

RemoveTemp() {
	trap : EXIT HUP INT TERM
	if [ -n "${dosave_file:++}" ]
	then	test -f "${dosave_file}" && rm -- "${dosave_file}"
		dosave_file=
	fi
	if [ -n "${nosave_file:++}" ]
	then	test -f "${nosave_file}" && rm -- "${nosave_file}"
		nosave_file=
	fi
	if [ -n "${kill_file:++}" ]
	then	test -f "${kill_file}" && rm -- "${kill_file}"
		kill_file=
	fi
	trap - EXIT HUP INT TERM
}

GetDirChange() {
	[ -n "${dirchange:++}" ] && return
	dirchange=`"${1}" print_dir_change 2>&1` \
	&& ! case ${dirchange} in
	*/)	false;;
	esac || {
		Error "error: ${1} print_dir_change: ${dirchange}"
		dirchange=
		return 1
	}
}

create_trap=:
CreateFile() {
	test -e "${2}" && return
	eval ${1}=\${2}
	if ${create_trap}
	then	trap RemoveTemp EXIT HUP INT TERM
		create_trap=false
	fi
	: >"${2}" && return
	RemoveTemp
	return 1
}

CreateDosave() {
	GetDirChange "${1}" && CreateFile dosave_file "${dirchange}/.do-save"
}


CreateNosave() {
	GetDirChange "${1}" && CreateFile nosave_file "${dirchange}/.no-save"
}

CreateKillfile() {
	GetDirChange "${1}" && CreateFile kill_file "${dirchange}/.No-save"
}

CheckStop() {
	dirchange=
	NoTemp
	checked_need=false
	will_restart=:
	if ${kill_force}
	then	CreateKillfile "${1}"
		return
	fi
	checkstopres=`"${1}" -q will_squash 2>&1`
	case ${checkstopres} in
	0)
		:;;
	1)
		${keep_force} || return 0
		CreateNosave "${1}"
		return;;
	*)
		Error "error in ${1}: ${checkstopres}"
		return 1;;
	esac
	if ! ${save_force}
	then	will_restart=${force}
		return 0
	fi
	if ${force}
	then	CreateDosave "${1}"
		return
	fi
	checked_need=:
	need_result=`"${1}" -q need_squash 2>&1`
	case ${need_result} in
	0)
		will_restart=false
		return 0;;
	1)
		CreateDosave "${1}"
		return;;
	*)
		Error "error in ${1}: ${checkstopres}"
		return 1;;
	esac
}

CheckRunning() {
	if "${1}" -q status
	then	if ! ${2:-:}
		then	Echo "${1} was already started"
			return 1
		fi
	elif ${2:-:}
	then	Echo "${1} is not running"
		return 1
	fi
}

Stop() {
	stoparg=${1}
	shift
	need_running=:
	case ${stoparg} in
	STOP)
		need_running=false;;
	esac
	CheckRunning "${1}" ${need_running} || return 0
	filetext=${1#*squash_}
	case ${stoparg} in
	rest*)
		CheckStop "${1}" || return
		if ${will_restart}
		then	TitleInfo "restart ${filetext}"
			Echo "Restarting ${filetext}..."
			"${1}" restart && RemoveTemp
		else	PrintInit "${1}"
			PrintNoSave ${checked_need} "${1}"
		fi;;
	stop|STOP)
		CheckStop "${1}" || return
		if ${need_running}
		then	TitleInfo "stop ${filetext}"
			Echo "stopping ${filetext}"
		else	TitleInfo "stop nunrunning ${filetext}"
			Echo "stopping nonrunning ${filetext}"
		fi
		"${1}" ${stoparg}
		stopret=${?}
		RemoveTemp && return ${stopret};;
	zap)
		Echo "Zapping ${filetext}"
		"${1}" zap;;
	esac
}

Start() {
	CheckRunning "${1}" false || return 0
	filetext=${1#*squash_}
	TitleInfo "start ${filetext}"
	Echo "Starting ${filetext}..."
	"${1}" start
}

Matchingji() {
	case ${j#*_} in
	${i})
		test -L "${j}" && test -x "${j}" && return;;
	esac
	return 1
}

PushArray() {
	eval pa__=\${${1}__:-0}
	eval "${1}__${pa__}=\${2}
	${1}__="'$(( ${pa__} + 1 ))'
}

InArray() {
	eval "pa__=\${${1}__:-0}
	"'while [ ${pa__} -gt 0 ]
	do	pa__=$(( ${pa__} - 1 ))
		eval [ \"\${${1}__${pa__}}\" = \"\${2}\" ] && return
	done'
	return 1
}

GetArray() {
	eval ${1}=\${${2}__${3}}
}

Doall() {
	stat=0
	nosave=false
	case ${1} in
	-*)
		a=${1#-}
		shift;;
	*)
		a=;;
	esac
	f=${1}
	shift
	# first check all args:
	max_len=0
	inits__=0
	for i
	do	ifound=false
		for j in /etc/init.d/squash_*
		do	Matchingji || continue
			ifound=:
			InArray inits "${j}" && continue
			PushArray inits "${j}"
			${alpha_order} && PushArray order "${j}"
			curr_len=${#j}
			[ ${max_len} -lt ${curr_len} ] && max_len=${curr_len}
		done
		${ifound} || Die "no executable symlink /etc/init.d/squash_${i}"
	done
	if ${alpha_order}
	then	inits__=0
		for i in /etc/init.d/squash_*
		do	InArray order "${i}" && PushArray inits "${i}"
		done
	fi
	i=0
	while [ ${i} -lt ${inits__} ]
	do	GetArray j inits ${i}
		i=$(( ${i} + 1 ))
		if ${error_skip} && [ ${stat} -ne 0 ]
		then	Echo "Skipping ${j} due to previous error"
			continue
		fi
		${f} ${a} "${j}" || stat=${?}
	done
	${nosave} && Echo "
# changes are not re-squashed if either MAGICFILE exists or if
# there are not enough changes to reach THRESHOLD.
# To force re-squashing, remove MAGICFILE (usually DIR_CHANGE/.no-save)
# or create an IGNORE_THRESHOLD file      (usually DIR_CHANGE/.do-save), resp.
# The latter happens if you call \"${0##*/}\" with option -s.
"
	Exit ${stat}
}

opt=${1}
[ ${#} -eq 0 ] || shift
[ ${#} -ne 0 ] || set -- '*'
case ${opt} in
stat*|sh*|[lpi]*)
	Doall Status "${@}";;
re*)
	Doall -restart Stop "${@}";;
sto*)
	Doall -stop Stop "${@}";;
S*)
	Doall -STOP Stop "${@}";;
z*)
	Doall -zap Stop "${@}";;
star*)
	Doall Start "${@}";;
*)
	Usage;;
esac
Exit
