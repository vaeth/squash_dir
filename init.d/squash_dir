#!/sbin/runscript
# (C) Martin VÃ¤th <martin@mvath.de>

depend () {
	need localmount
}

opts="${opts} will_squash need_squash have_magic"
opts="${opts} print_dir_change print_dir_squash"

Which () {
	command -v "${1}"
}

Warn () {
	local errstat
	[ ${1} -eq 0 ] && return 0
	errstat=${1}
	shift
	ewarn "${*} [exit with ${errstat}]"
	return ${errstat}
}

Error () {
	local errstat
	[ ${1} -eq 0 ] && return 0
	errstat=${1}
	shift
	eerror "${*} [exit with ${errstat}]"
	return ${errstat}
}

Mkdir () {
	[ -z "${1}" ] && return
	test -d "${1}" && return
	mkdir -p -- "${1}" || Error ${?} "cannot create ${1}"
}

Normalize () {
	local truename i rstat prev
	rstat=0
	for i
	do	eval "truename=\"\${${i}}\""
		if [ -z "${truename}" ]
		then	eval "${i}=\"\""
			rstat=1
			continue
		fi
		if [ -n "${readlink}" ]
		then	prev="${truename}"
			truename=`"${readlink}" -f -- "${truename}"` \
				|| truename=''
			[ -n "${truename}" ] || truename="${prev}"
		fi
		while ! case "${truename}" in
			*//*)	false;;
			esac
		do	truename="${truename%%//*}/${truename#*//}"
		done
		[ "${truename}" != '/' ] && truename="${truename%/}"
		eval "${i}"'="${truename}"'
	done
	return ${rstat}
}

Mktemp () {
	local d rstat
	rstat=0
	eval "d=\"\${${1}}\""
	Mkdir "${d%/*}" || rstat=${?}
	if [ ${rstat} -eq 0 ]
	then	d=`mktemp ${2} -- "${d}"` || \
			Error ${?} mktemp ${2} "${d} failed"
		rstat=${?}
		[ -n "${2}" ] && chmod 755 -- "${d}"
		eval "${1}"'="${d}"'
	fi
	Normalize ${1} && return ${rstat}
}

Mktempdir () {
	local tstat wstat v
	if ! ${1}
	then	eval "Mkdir \"\${$2}\""
		return
	fi
	Mktemp ${2} -d
	tstat=${?}
	eval "v=\"\${${2}}\""
	v="${v%/}"
	case "${v}" in
	/*)	:;;
	*)	return ${tstat};;
	esac
	if ${have_name_file}
	then	printf "%s='%s'\n" ${3} "${v##*/}" >>"${NAME_FILE}"
	else	have_name_file=:
		printf "%s='%s'\n" ${3} "${v##*/}" >"${NAME_FILE}"
	fi
	wstat=${?}
	if [ ${wstat} -ne 0 ]
	then	Error ${wstat} "cannot write to ${NAME_FILE}"
		[ ${tstat} -eq 0 ] && return ${wstat}
	fi
	return ${tstat}
}

Lock() {
	if [ "${LOCKFILE}" = '/' ]
	then	"${@}"
		return
	fi
	flock -w 20 -- "${LOCKFILE}" "${@}"
}

Umount () {
	Lock umount "${UMOUNT_OPTS}" "${@}" >/dev/null && return
	local rstat
	rstat=${?}
	if [ -n "${LAZY_UMOUNT}" ]
	then	Lock umount -l "${UMOUNT_OPTS}" "${@}" >/dev/null && return
		rstat=${?}
	fi
	Error ${rstat} "umount ${*} failed"
}

Mount () {
	Lock mount "${@}"
}

Cleardir () {
	local d i e
	d="${1}"
	test -d "${d}" || return
	e="${2}"
	[ -n "${e}" ] && e="|${e}"
	eval "for i in \"\${d}\"/* \"\${d}\"/.*
	do	case \"\${i##*/}\" in
		''|.|..${e})	continue;;
		'*'|'.*')	test -e \"\${i}\" || continue;;
		esac
		rm -rf -- \"\${i}\" || return
	done"
	return 0
}

Compare () {
	local ori
	ori="${DIR_SQUASH}/${1##*/}"
	if test -f "${1}"
	then	test -f "${ori}" && diff -q -- "${1}" "${ori}" >/dev/null 2>&1
		return
	fi
	test -d "${1}" || return 0
	test -d "${ori}" && diff -r -q -- "${1}" "${ori}" >/dev/null 2>&1
}

Checktemp () {
	eval "case \"\${${1}}\" in
	*XXXXXX)
		${1}_temp=:
		[ ${#} -eq 2 ] && : \${RM_${1}:=${2}};;
	*)	${1}_temp=false;;
	esac"
}

Readtemps () {
	local i j k c
	[ -n "${NAME_FILE}" ] \
		&& c=`cat -- "${NAME_FILE} 2>/dev/null"` \
		&& [ -n "${c}" ] || {
			Error ${?} "cannot read ${NAME_FILE}"
			eend ${?}
			return
		}
	c="
${c}
"
	for i in DIR_SQUASH DIR_CHANGE
	do	eval "j=\"\${${i}}\"; k=\${c##*\"
\${i}_name='\"}; \${${i}_temp}" || continue
		k=${k%%"'
"*}
		case "${k}" in
		''|*/*)
			Error 1 "broken ${i}_name in ${NAME_FILE}"
			eend ${?}
			return;;
		esac
		eval "${i}=\"\${j%/*}/\${k}\""
	done
}

CreateFirstTime () {
	local exitstatus
	einfo "It seems you start ${SVCNAME} for the first time with this configuration:"
	einfo "The squashed file ${FILE_SQFS} does not exist yet."
	einfo "So I will try to initialize..."
	test -d "${DIRECTORY}" || {
		eerror "The DIRECTORY \"${DIRECTORY}\" does not exist."
		eerror "Probably something is wrong with the configuration."
		eerror "Exiting without doing anything."
		return 2
	}
	case "${FILE_SQFS}" in
	"${DIRECTORY}"/*|"${DIR_CHANGE}"/*|"${DIR_SQUASH}"/*|'/.sqfs'|'/')
		false;;
	/*)	! test -e "${FILE_SQFS}";;
	*)	false;;
	esac || {
		eerror "Something is strange with this configuration:"
		eerror "You used a bad filename for FILE_SQFS or it appears in a bad path."
		eerror "Exiting without doing anything."
		return 2
	}
	einfo "Squashing ${DIRECTORY} to ${FILE_SQFS}"
	mksquashfs "${DIRECTORY}" "${FILE_SQFS}" || {
		Error ${?} "mksquashfs failed. Exiting."
		return
	}
	test -f "${FILE_SQFS}" || {
		eerror "mksquashfs succeeded but there is no ${FILE_SQFS}"
		eerror "This is very strange. Exiting."
		return
	}
	chmod -- 644 "${FILE_SQFS}" || {
		Error ${?} "chmod failed for ${FILE_SQFS}. Exiting."
		return
	}
	einfo "Removing all in ${DIRECTORY}"
	Cleardir "${DIRECTORY}" || {
		error "Cannot properly clean ${DIRECTORY}. Exiting."
		return
	}
	einfo "Now its content is only available as squashfs."
	einfo "Name of the squashfs file: ${FILE_SQFS}"
}

Check () {
	local i
	readlink="`Which readlink`" || readlink=''
	[ -n "${DIRECTORY}" ] && : ${FILE_SQFS:="${DIRECTORY}.sqfs"}
	for i in "${DIRECTORY}" "${DIR_CHANGE}" "${DIR_SQUASH}" \
		"${TMPDIR}" "${FILE_SQFS}" "${FILE_SQFS_OLD}" \
		"${FILE_TBZ}" "${FILE_TBZ_OLD}" "${NAME_FILE}"
	do	case "${i}" in
		''|/*)	continue;;
		esac
		eerror "${i} is not an absolute path"
		eend 2
		return
	done
	Normalize TMPDIR || TMPDIR='/tmp'
	Normalize NAME_FILE || NAME_FILE="/var/run/${SVCNAME}"
	if [ -n "${DIR_CHANGE}" ] && [ -z "${DIR_SQUASH}" ]
	then	DIR_SQUASH="/var/run/${SVCNAME}.readonly"
		: ${RM_DIR_SQUASH=:}
	fi
	Checktemp DIR_SQUASH parents
	Checktemp DIR_CHANGE parents
	if ${DIR_SQUASH_temp} || ${DIR_CHANGE_temp}
	then	use_name_file=:
		have_name_file=false
	else	use_name_file=false
	fi
	if ${use_name_file} && [ "${1}" != start ]
	then	Readtemps || {
			eend ${?}
			return
		}
	fi
	if ! Normalize DIRECTORY FILE_SQFS
	then	eerror "You must set paths in /etc/conf.d/${SVCNAME}"
		eerror "(See /etc/init.d/${SVCNAME} for further details)"
		eend 2
		return
	fi
	if ! test -f "${FILE_SQFS}"
	then	if [ "${1}" = start ]
		then	CreateFirstTime || {
				eend ${?}
				return
			}
		else	eerror "The squashed file ${FILE_SQFS} does not exist."
			eerror "This is very strange; probably it is better to exit."
			eend 2
			return
		fi
	fi
	case "${LOCKFILE}" in
	''|/*)	: ${LOCKFILE:='/etc/mtab.lock'};;
	*)	LOCKFILE='/';; # Do not use the lockfile feature.
	esac
	: ${UMOUNT_OPTS=-i}
}

Aufs () {
	eval "Mount ${MOUNT_AUFS--i} -t aufs \
		-o \"br:\${DIR_CHANGE}=rw:\${mount_squash}=rr\" \
		-- aufs \"\${DIRECTORY}\"" \
	|| Warn ${?} "Failed mounting ${DIR_CHANGE} with aufs"
}

Unionfs () {
	eval "Mount ${MOUNT_UNIONFS} -t unionfs \
		-o \"dirs=\${DIR_CHANGE}=rw:\${mount_squash}=ro\" \
		-- unionfs \"\${DIRECTORY}\"" \
	|| Warn ${?} "Failed mounting ${DIR_CHANGE} with unionfs"
}

UnionfsFuse () {
	local uf
	if ! uf="`Which unionfs`" || [ -z "${uf}" ] || ! test -e "${uf}"
	then	ewarn "unionfs-fuse appears not to be installed"
		return 1
	fi
	eval "\"\${uf}\" \
	${MOUNT_UNIONFS_FUSE--o cow -o allow_other -o use_ino -o nonempty} \
		\"\${DIR_CHANGE}=RW:\${mount_squash}=RO\" \
		\"\${DIRECTORY}\"" || \
	Warn ${?} "Failed mounting ${DIR_CHANGE} with unionfs-fuse"
}

Funionfs () {
	local fu stat
	if ! fu="`Which funionfs`" || [ -z "${fu}" ] || ! test -e "${fu}"
	then	ewarn "funionfs appears not to be installed"
		return 1
	fi
	eval "\"\${fu}\" \"\${DIR_CHANGE}\" \"\${DIRECTORY}\" \
		${MOUNT_FUNIONFS--o allow_other -o nonempty} \
		-o \"dirs=\${mount_squash}=ro\"" || \
	Warn ${?} "Failed mounting ${DIR_CHANGE} with funionfs"
}

Mountunion () {
	local tool
	[ -z "${ORDER}" ] && ORDER="aufs unionfs-fuse unionfs funionfs"
	for tool in ${ORDER}
	do	case "${tool}" in
		aufs)
			Aufs && return 0;;
		unionfs)
			Unionfs && return 0;;
		unionfs*)
			UnionfsFuse && return 0;;
		funionfs)
			Funionfs && return 0;;
		*)
			ewarn "Strange entry in ORDER: ${tool}";;
		esac
	done
	false
}

MountRW () {
	local mountstat
	Mkdir "${DIRECTORY}" || return
	Mktempdir ${DIR_CHANGE_temp} DIR_CHANGE DIR_CHANGE_name || return
	Mountunion && return
	mountstat=${?}
	if Mount --rbind "${mount_squash}" -- "${DIRECTORY}"
	then	einfo "Mounted ${DIRECTORY} readonly"
	else	Error ${?} "Failed even rbinding ${DIRECTORY}"
	fi
	return ${mountstat}
}

MountRO () {
	Mkdir "${DIRECTORY}" || return
	Mount --rbind "${mount_squash}" -- "${DIRECTORY}"
	Error ${?} "Failed rbinding ${DIRECTORY}"
}

Mksquash () {
	mount_squash=''
	if [ -z "${DIR_SQUASH}" ]
	then	Mkdir "${DIRECTORY}" && mount_squash="${DIRECTORY}"
	else	Mktempdir ${DIR_SQUASH_temp} DIR_SQUASH DIR_SQUASH_name && \
			mount_squash="${DIR_SQUASH}"
	fi
}

start () {
	local exitstat
	Check start || return
	Mksquash || return
	ebegin "Mounting ${FILE_SQFS} as ${DIRECTORY}"
	if Mount -t squashfs -o loop,ro -- "${FILE_SQFS}" "${mount_squash}"
	then	if [ -n "${DIR_CHANGE}" ]
		then	MountRW
			exitstat=${?}
		elif [ -n "${DIR_SQUASH}" ]
		then	MountRO
			exitstat=${?}
		else	exitstat=0
		fi
	else	exitstat=${?}
		Error ${exitstat} \
			"Failed mounting ${FILE_SQFS} as ${mount_squash}"
		rmdir -- "${mount_squash}"
	fi
	eend ${exitstat}
}

MvTbzOld () {
	[ -n "${FILE_TBZ_OLD}" ] || return 0
	test -e "${FILE_TBZ}" || return 0
	${MV_FILE_TBZ:-mv --} "${FILE_TBZ}" "${FILE_TBZ_OLD}"
}

MvSqfsOld () {
	[ -n "${FILE_SQFS_OLD}" ] || return 0
	test -e "${FILE_SQFS}" || return 0
	${MV_FILE_SQFS:-mv --} "${FILE_SQFS}" "${FILE_SQFS_OLD}"
}

Rmdir () {
	local parent rms
	case "${1}" in
	''|0|n*|N*|f*|F*)
		return 0;;
	*p*)	parent=:;;
	*)	parent=false;;
	esac
	[ -z "${2}" ] || ! test -d "${2}" && return
	rmdir -- "${2}" || {
		ewarn "could not remove ${2}"
		return 1
	}
	${parent} && rmdir -p -- "${2%/*}" >/dev/null 2>&1
	return 0
}

ClearRw () {
	[ -z "${DIR_CHANGE}" ] || ! test -d "${DIR_CHANGE}" && return 0
	Cleardir "${DIR_CHANGE}" "${@}" || return
	Rmdir "${RM_DIR_CHANGE}" "${DIR_CHANGE}"
}

Tbzd () {
	[ -z "${FILE_TBZ}" ] && return 0
	MvTbzOld
	Error ${?} "Failed moving ${FILE_SQFS} -> ${FILE_SQFS_OLD}"
	${TARCMD:-tar -cjf} "${FILE_TBZ}" "${DIRECTORY}/" >/dev/null
}

Sqfsd () {
	local addoptions redirect
	: ${TMP_SQFS:="${TMPDIR}/${SVCNAME}.sqfs.XXXXXXXX"}
	Checktemp TMP_SQFS
	${TMP_SQFS_temp} && Mktemp TMP_SQFS
	chmod -- 644 "${TMP_SQFS}"
	addoptions='-noappend'
	redirect='>/dev/null'
	case "${VERBOSE_MODE}" in
	0)	addoptions="${addoptions} -no-progress";;
	2)	redirect="";;
	esac
	eval "mksquashfs \"\${DIRECTORY}\" \"\${TMP_SQFS}\" \
		${addoptions} \${MKSQUASHFS} ${redirect}" \
		&& MvSqfsOld \
		&& mv -f -- "${TMP_SQFS}" "${FILE_SQFS}"
}

HaveMagic () {
	: ${MAGIC_FILE:="${DIR_CHANGE}/.no-save"}
	test -e "${MAGIC_FILE}"
}

CalcIgnore () {
	local i_ r_ v_ b_
	v_="${1}"
	shift
	r_="${1}"
	case "${r_}" in
	*' '*)	r_="'(' ${r_} ')'";;
	esac
	shift
	b_=''
	for i_
	do	[ -n "${r_}" ] && b_=' -o '
		[ -n "${i_}" ] && i_="/${i_}"
		r_="${r_}${b_}-path \"\${DIR_CHANGE}${i_}\""
	done
	case "${v_}" in
	@*)	v_="${v_#@}"
		[ -n "${b_}" ] && r_="'(' ${r_} ')'";;
	esac
	eval "${v_}=\"\${r_}\""
}

NeedSquash () {
	local ignorefile ignoredir find
	[ -n "${DIR_CHANGE}" ] && test -d "${DIR_CHANGE}" || return 1
	[ -n "${DIRECTORY}" ] && test -d "${DIRECTORY}" || return 1
	eval "CalcIgnore @ignorefile \"\${IGNOREFILE}\" \
		${IGNORETOPFILE} \
		\"._funionfs*\" \
		.wh..wh.aufs"
	eval "CalcIgnore @ignoredir \"\${IGNOREDIR}\" \
		${IGNORETOPDIR} \
		.wh..wh.plink \
		.wh..wh.plnk \
		.wh..wh..tmp \
		.wh..wh.orph \
		.unionfs"
	eval "CalcIgnore find \"\${IGNORE}\" \
		${IGNORETOP} \
		\"\""
	[ -n "${ignorefile}" ] && \
		find="${find} -o '(' ${ignorefile} -type f ')'"
	[ -n "${ignoredir}" ] && \
		find="${find} -o '(' ${ignoredir} -type d -prune ')'"
	find="find \"\${DIR_CHANGE}\" ${find} -o -exec "
	eval "${find}/bin/false '{}' '+'" && return 1
	[ -z "${IGNORETOUCH}" ] && return 0
	# Do the time-consuming file-comparison only if it appears necessary:
	(	d="for i
do	case \"\${i#\"\${DIR_CHANGE}/\"}\" in
${IGNORETOUCH})	c=\"\${DIR_SQUASH}/\${i##*/}\"
	if test -L \"\${i}\"
	then	test -L \"\${c}\"
	else	! test -L \"\${c}\"
	fi || break
	test -d \"\${i}\" && test -d \"\${c}\" && continue
	test -f \"\${i}\" && test -f \"\${c}\" \
	&& diff -q -- \"\${1}\" \"\${c}\" >/dev/null 2>&1 && continue;;
esac
exit 1
done
:"
		export DIR_CHANGE DIR_SQUASH
		eval "! ${find}\"\${SHELL:-/bin/sh}\" -c \"\${d}\" sh '{}' '+'"
	)
}

ExceedThreshold () {
	local n
	: ${THRESHOLD:=0}
	[ ${THRESHOLD} -gt 0 ] || return 0
	Normalize IGNORE_THRESHOLD || \
		IGNORE_THRESHOLD="${DIR_CHANGE}/.do-save"
	test -e "${IGNORE_THRESHOLD}" && return 0
	n=`du -s -k -- "${DIR_CHANGE}" | cut -f 1`
	[ "${THRESHOLD}" -le "${n}" ]
}

RemoveThreshold () {
	case "${IGNORE_THRESHOLD}" in
	"${DIR_CHANGE}/"*)
		test -f "${IGNORE_THRESHOLD}" || return 0
		rm -- "${IGNORE_THRESHOLD}";;
	esac
}

Store () {
	local exitstat
	HaveMagic && return 0
	ExceedThreshold || return 0
	if ! NeedSquash
	then	ClearRw "${KEEP}"
		Error ${?} "Clearing ${DIR_CHANGE} failed"
		return
	fi
	Normalize FILE_SQFS_OLD FILE_TBZ FILE_TBZ_OLD
	ebegin "Squashing ${DIRECTORY} to ${FILE_SQFS}"
	einfo "(this may take a while)"
	RemoveThreshold
	Sqfsd
	exitstat=${?}
	if [ ${exitstat} -eq 0 ]
	then	if [ -n "${FILE_TBZ}" ]
		then	eend ${exitstat}
			ebegin "Updating archive ${FILE_TBZ}"
			einfo "(this may take a while)"
			Tbzd
			exitstat=${?}
			Error ${exitstat} \
				"Creating ${FILE_TBZ} failed"
		fi
		ClearRw
		Error ${?} "Clearing ${DIR_CHANGE} failed"
	else	Error ${exitstat} "Squashing ${DIRECTORY} failed"
	fi
	eend ${exitstat}
	return ${exitstat}
}

UmountAll () {
	local exitstat
	ebegin "Unmounting ${DIRECTORY}"
	Umount -- "${DIRECTORY}"
	exitstat=${?}
	if [ -z "${DIR_SQUASH}" ]
	then	eend ${exitstat}
		return ${exitstat}
	fi
	Umount -d -- "${DIR_SQUASH}" || Umount -d -- "${FILE_SQFS}" \
		|| exitstat=${?}
	Rmdir "${RM_DIR_SQUASH}" "${DIR_SQUASH}"
	eend ${exitstat}
	return ${exitstat}
}

RmNamefile () {
	${use_name_file} || return 0
	[ -n "${NAME_FILE}" ] && rm -- "${NAME_FILE}" && return
	Error ${?} "cannot remove file ${NAME_FILE}"
}

stop () {
	Check && Store && UmountAll && RmNamefile
}

will_squash () {
	local nomagic exceed ret s
	Check || return ${?}
	HaveMagic && nomagic=false || nomagic=:
	ExceedThreshold && exceed=: || exceed=false
	if ${nomagic} && ${exceed} && NeedSquash
	then	s="Will squash ${DIRECTORY} to ${FILE_SQFS}"
		echo 1 >&2
		ret=0
		einfo "Have found modified ${DIR_CHANGE}"
	else	s="Will not squash ${DIRECTORY} to ${FILE_SQFS}"
		echo 0 >&2
		ret=1
		${nomagic} && ${exceed} && einfo "No modified ${DIR_CHANGE}"
	fi
	if ${nomagic}
	then	einfo "No magic file ${MAGIC_FILE}"
	else	einfo "Have found magic file ${MAGIC_FILE}"
	fi
	if ${exceed}
	then	[ ${THRESHOLD} -gt 0 ] && \
			einfo "Exceeded threshold in ${DIR_CHANGE}"
	else	einfo "Threshold not exceeded in ${DIR_CHANGE}"
	fi
	einfo "${s}"
	return ${ret}
}

need_squash () {
	Check || return ${?}
	if NeedSquash
	then	echo 1 >&2
		if HaveMagic
		then	einfo "Have found magic file ${MAGIC_FILE}"
		else	einfo "No magic file ${MAGIC_FILE}"
		fi
		einfo "Have found modified ${DIR_CHANGE}"
		einfo "Need to squash ${DIRECTORY} to ${FILE_SQFS}"
		return 0
	fi
	echo 0 >&2
	einfo "No modified ${DIR_CHANGE}"
	einfo "Need not squash ${DIRECTORY} to ${FILE_SQFS}"
	return 1
}

have_magic () {
	Check || return ${?}
	if HaveMagic
	then	echo 1 >&2
		einfo "Magic file ${MAGIC_FILE} exists."
		return 0
	fi
	echo 0 >&2
	einfo "No magic file ${MAGIC_FILE} exists."
	return 1
}

print_dir_change () {
	Check || return ${?}
	printf '%s/' "${DIR_CHANGE}" >&2
	return 0
}

print_dir_squash () {
	Check || return ${?}
	printf '%s/' "${DIR_SQUASH}" >&2
	return 0
}
