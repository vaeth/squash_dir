#!/sbin/runscript
# (C) Martin V\"ath <martin@mvath.de>

depend() {
	need localmount
}

description='Mount a squashed directory in a writable manner'

extra_commands='will_squash need_squash have_magic have_kill'
extra_started_commands='print_dir_change print_dir_squash'

description_will_squash='print 1 to stderr if stop operation would re-squash'
description_need_squash='print 1 to stderr if new data was written'
description_have_magic='print 1 to stderr if $MAGIC_FILE exists'
description_have_kill='print 1 to stderr if $KILL_FILE exists'
description_print_dir_change='print effective $DIR_CHANGE to stderr'
description_print_dir_squash='print effective $DIR_SQUASH to stderr'

Which() {
	command -v "${1}" 2>/dev/null
}

Warn() {
	[ ${1} -eq 0 ] && return
	warnstat=${1}
	shift
	ewarn "${*} [exit with ${warnstat}]"
	return ${warnstat}
}

Error() {
	[ ${1} -eq 0 ] && return
	errorstat=${1}
	shift
	eerror "${*} [exit with ${errorstat}]"
	return ${errorstat}
}

Mkdir() {
	[ -z "${1}" ] && return
	test -d "${1}" && return
	mkdir -p -m 755 -- "${1}" || Error ${?} "cannot create ${1}"
}

Normalize() {
	normalizestat=0
	for normalizei
	do	eval normalizen=\${${normalizei}}
		if [ -z "${normalizen}" ]
		then	eval ${normalizei}=
			normalizestat=1
			continue
		fi
		if [ -n "${readlink}" ]
		then	normalizep=`"${readlink}" -f -- "${normalizen}"`
		else	normalizep=`cd -P -- "${normalizen}" >/dev/null 2>&1 \
				&& printf '%sA' "${PWD}"` \
				&& normalizep=${normalizep%A}
		fi && [ -n "${normalizep}" ] && normalizen=${normalizep}
		while ! case ${normalizen} in
			*//*)	false;;
			esac
		do	normalizen="${normalizen%%//*}/${normalizen#*//}"
		done
		[ "${normalizen}" != '/' ] && normalizen=${normalizen%/}
		eval ${normalizei}=\${normalizen}
	done
	return ${normalizestat}
}

Mktemp() {
	mktempstat=0
	eval mktempn=\${${1}}
	Mkdir "${mktempn%/*}" || mktempstat=${?}
	if [ ${mktempstat} -eq 0 ]
	then	mktempn=`mktemp ${2} -- "${mktempn}"` || \
			Error ${?} "mktemp ${2} ${mktempn} failed"
		mktempstat=${?}
		[ -n "${2}" ] && chmod 755 -- "${mktempn}"
		eval ${1}=\${mktempn}
	fi
	Normalize ${1} && return ${mktempstat}
}

Mktempdir() {
	if ! ${1}
	then	Normalize ${2}
		eval "Mkdir \"\${$2}\""
		return
	fi
	Mktemp ${2} -d
	mktempdirtstat=${?}
	eval mktempdirv=\${${2}}
	mktempdirv=${mktempdirv%/}
	case ${mktempdirv} in
	/*)	:;;
	*)	return ${mktempdirtstat};;
	esac
	if ${have_name_file}
	then	printf "%s='%s'\n" ${3} "${mktempdirv##*/}" >>"${NAME_FILE}"
	else	have_name_file=:
		printf "%s='%s'\n" ${3} "${mktempdirv##*/}" >"${NAME_FILE}"
	fi
	mktempdirwstat=${?}
	if [ ${mktempdirwstat} -ne 0 ]
	then	Error ${mktempdirwstat} "cannot write to ${NAME_FILE}"
		[ ${mktempdirtstat} -eq 0 ] && return ${mktempdirwstat}
	fi
	return ${mktempdirtstat}
}

Lock() {
	case ${LOCKFILE-auto} in
	auto)	if test -h /etc/mtab
		then	LOCKFILE=
		else	LOCKFILE='/etc/mtab.lock'
			false
		fi;;
	/*)	false;;
	esac && {
		"${@}"
		return
	}
	flock -w 20 -- "${LOCKFILE}" "${@}"
}

Umount() {
	Lock umount "${UMOUNT_OPTS}" "${@}" >/dev/null && return
	umountstat=${?}
	case ${LAZY_UMOUNT-y} in
	[yYtT:1]*)
		Warn ${umountstat} "Non-lazy umount ${*} failed"
		Lock umount -l "${UMOUNT_OPTS}" "${@}" >/dev/null && return
		umountstat=${?};;
	esac
	Error ${umountstat} "umount ${*} failed"
}

Mount() {
	Lock mount "${@}"
}

# Usage: Cleardir directory [keep] [action-before-first-removal]
Cleardir() {
	cleardird=${1}
	test -d "${cleardird}" || return
	cleardire=${2:+|}${2}
	cleardirt=${3:-:}
	eval "for cleardiri in \"\${cleardird}\"/* \"\${cleardird}\"/.*
	do	case \${cleardiri##*/} in
		''|.|..${cleardire})	continue;;
		'*'|'.*')	test -e \"\${cleardiri}\" || continue;;
		esac
		eval \"\${cleardirt}\"
		cleardirt=:
		rm -rf -- \"\${cleardiri}\" || return
	done"
	return 0
}

Compare() {
	compareori="${DIR_SQUASH}/${1##*/}"
	if test -f "${1}"
	then	test -f "${compareori}" && \
			diff -q -- "${1}" "${compareori}" >/dev/null 2>&1
		return
	fi
	test -d "${1}" || return 0
	test -d "${compareori}" && \
		diff -r -q -- "${1}" "${compareori}" >/dev/null 2>&1
}

Checktemp() {
	eval "case \${${1}} in
	*XXXXXX)
		${1}_temp=:
		[ ${#} -eq 2 ] && : \${RM_${1}:=${2}};;
	*)	${1}_temp=false;;
	esac"
}

Readtemps() {
	[ -n "${NAME_FILE}" ] \
		&& readtempsc=`cat -- "${NAME_FILE} 2>/dev/null"` \
		&& [ -n "${readtempsc}" ] || {
			eend ${?} "cannot read ${NAME_FILE}"
			return
		}
	readtempsc="
${readtempsc}
"
	for readtempsi in DIR_SQUASH DIR_CHANGE
	do	eval "readtempsj=\${${readtempsi}}
readtempsk=\${readtempsc##*\"
\${readtempsi}_name='\"}
\${${readtempsi}_temp}" || continue
		readtempsk=${readtempsk%%"'
"*}
		case ${readtempsk} in
		''|*/*)
			eend 1 "broken ${readtempsi}_name in ${NAME_FILE}"
			return;;
		esac
		eval ${readtempsi}=\${readtempsj%/*}/\${readtempsk}
	done
}

CreateFirstTime() {
	einfo "It seems you start ${SVCNAME} for the first time with this configuration:"
	einfo "The squashed file ${FILE_SQFS} does not exist yet."
	einfo "So I will try to initialize..."
	test -d "${DIRECTORY}" || {
		eerror "The DIRECTORY \"${DIRECTORY}\" does not exist."
		eerror "Probably something is wrong with the configuration."
		eerror "Exiting without doing anything."
		return 2
	}
	case ${FILE_SQFS} in
	"${DIRECTORY}"/*|"${DIR_CHANGE}"/*|"${DIR_SQUASH}"/*|'/.sqfs'|'/')
		false;;
	/*)	! test -e "${FILE_SQFS}";;
	*)	false;;
	esac || {
		eerror "Something is strange with this configuration:"
		eerror "You used a bad filename for FILE_SQFS or it appears in a bad path."
		eerror "Exiting without doing anything."
		return 2
	}
	einfo "Squashing ${DIRECTORY} to ${FILE_SQFS}"
	mksquashfs "${DIRECTORY}" "${FILE_SQFS}" || {
		Error ${?} "mksquashfs failed. Exiting."
		return
	}
	test -f "${FILE_SQFS}" || {
		eerror "mksquashfs succeeded but there is no ${FILE_SQFS}"
		eerror "This is very strange. Exiting."
		return
	}
	chmod -- 644 "${FILE_SQFS}" || {
		Error ${?} "chmod failed for ${FILE_SQFS}. Exiting."
		return
	}
	einfo "Removing all in ${DIRECTORY}"
	Cleardir "${DIRECTORY}" || {
		error "Cannot properly clean ${DIRECTORY}. Exiting."
		return
	}
	einfo "Now its content is only available as squashfs."
	einfo "Name of the squashfs file: ${FILE_SQFS}"
}

Check() {
	readlink=`Which readlink` || readlink=
	[ -n "${DIRECTORY}" ] && : ${FILE_SQFS:=${DIRECTORY}.sqfs}
	for checki in "${DIRECTORY}" "${DIR_CHANGE}" "${DIR_SQUASH}" \
		"${TMPDIR}" "${FILE_SQFS}" "${FILE_SQFS_OLD}" \
		"${FILE_TBZ}" "${FILE_TBZ_OLD}" "${NAME_FILE}"
	do	case ${checki} in
		''|/*)	continue;;
		esac
		eend 2 "${checki} is not an absolute path"
		return
	done
	Normalize TMPDIR || TMPDIR='/tmp'
	Normalize NAME_FILE || NAME_FILE="/var/run/${SVCNAME}"
	if [ -n "${DIR_CHANGE}" ] && [ -z "${DIR_SQUASH}" ]
	then	DIR_SQUASH="/var/run/${SVCNAME}.readonly"
		: ${RM_DIR_SQUASH=:}
	fi
	Checktemp DIR_SQUASH parents
	Checktemp DIR_CHANGE parents
	if ${DIR_SQUASH_temp} || ${DIR_CHANGE_temp}
	then	use_name_file=:
		have_name_file=false
	else	use_name_file=false
	fi
	if [ "${1}" != start ]
	then	if ${use_name_file}
		then	Readtemps || {
				eend ${?}
				return
			}
		else	Normalize DIR_SQUASH DIR_CHANGE
		fi
	fi
	if ! Normalize DIRECTORY FILE_SQFS
	then	eerror "You must set paths in /etc/conf.d/${SVCNAME}"
		eerror "(See /etc/init.d/${SVCNAME} for further details)"
		eend 2
		return
	fi
	if ! test -f "${FILE_SQFS}"
	then	if [ "${1}" = start ]
		then	CreateFirstTime || {
				eend ${?}
				return
			}
		else	eerror "The squashed file ${FILE_SQFS} does not exist."
			eerror "This is very strange; probably it is better to exit."
			eend 2
			return
		fi
	fi
	: ${UMOUNT_OPTS=-i}
	: ${COMPRESSION=xz}
}

Aufs() {
	eval "Mount -t aufs ${MOUNT_AUFS--o noatime} \
		-o \"br:\${DIR_CHANGE}=rw:\${mount_squash}=rr\" \
		-- aufs \"\${DIRECTORY}\"" \
	|| Warn ${?} "Failed mounting ${DIR_CHANGE} with aufs"
}

Unionfs() {
	eval "Mount -t unionfs ${MOUNT_UNIONFS--o noatime} \
		-o \"dirs=\${DIR_CHANGE}=rw:\${mount_squash}=ro\" \
		-- unionfs \"\${DIRECTORY}\"" \
	|| Warn ${?} "Failed mounting ${DIR_CHANGE} with unionfs"
}

UnionfsFuse() {
	if ! unionfsfuse=`Which unionfs` || \
		[ -z "${unionfsfuse}" ] || ! test -e "${unionfsfuse}"
	then	ewarn "unionfs-fuse appears not to be installed"
		return 1
	fi
	if [ -z "${UNIONFS_FUSE_HIDE+set}" ]
	then	if unionfs --help 2>&1 | grep -q hide_meta_files
		then	UNIONFS_FUSE_HIDE='-o hide_meta_files'
		else	UNIONFS_FUSE_HIDE=
		fi
	fi
	eval "\"\${unionfsfuse}\" \
	${MOUNT_UNIONFS_FUSE--o cow -o allow_other -o use_ino -o nonempty -o noatime $UNIONFS_FUSE_HIDE} \
		\"\${DIR_CHANGE}=RW:\${mount_squash}=RO\" \
		\"\${DIRECTORY}\"" || \
	Warn ${?} "Failed mounting ${DIR_CHANGE} with unionfs-fuse"
}

Funionfs() {
	if ! funionfs=`Which funionfs` || \
		[ -z "${funionfs}" ] || ! test -e "${funionfs}"
	then	ewarn "funionfs appears not to be installed"
		return 1
	fi
	eval "\"\${funionfs}\" \"\${DIR_CHANGE}\" \"\${DIRECTORY}\" \
		${MOUNT_FUNIONFS--o allow_other -o nonempty} \
		-o \"dirs=\${mount_squash}=ro\"" || \
	Warn ${?} "Failed mounting ${DIR_CHANGE} with funionfs"
}

Mountunion() {
	for mountunion in ${ORDER-aufs unionfs-fuse unionfs funionfs}
	do	case ${mountunion} in
		aufs)
			Aufs && return;;
		unionfs)
			Unionfs && return;;
		unionfs*)
			UnionfsFuse && return;;
		funionfs)
			Funionfs && return;;
		*)
			ewarn "Strange entry in ORDER: ${mountunion}";;
		esac
	done
	return 1
}

MountRW() {
	Mkdir "${DIRECTORY}" || return
	Mktempdir ${DIR_CHANGE_temp} DIR_CHANGE DIR_CHANGE_name || return
	Mountunion && return
	mountrwstat=${?}
	if Mount --rbind "${mount_squash}" -- "${DIRECTORY}"
	then	einfo "Mounted ${DIRECTORY} readonly"
	else	Error ${?} "Failed even rbinding ${DIRECTORY}"
	fi
	return ${mountrwstat}
}

MountRO() {
	Mkdir "${DIRECTORY}" || return
	Mount --rbind "${mount_squash}" -- "${DIRECTORY}"
	Error ${?} "Failed rbinding ${DIRECTORY}"
}

Mksquash() {
	mount_squash=
	if [ -z "${DIR_SQUASH}" ]
	then	Mkdir "${DIRECTORY}" && mount_squash=${DIRECTORY}
	else	Mktempdir ${DIR_SQUASH_temp} DIR_SQUASH DIR_SQUASH_name && \
			mount_squash=${DIR_SQUASH}
	fi
}

start() {
	Check start || return
	Mksquash || return
	ebegin "Mounting ${FILE_SQFS} as ${DIRECTORY}"
	if Mount -t squashfs -o loop,ro,noatime -- "${FILE_SQFS}" "${mount_squash}"
	then	if [ -n "${DIR_CHANGE}" ]
		then	MountRW
			startstat=${?}
		elif [ -n "${DIR_SQUASH}" ]
		then	MountRO
			startstat=${?}
		else	startstat=0
		fi
	else	startstat=${?}
		Error ${startstat} \
			"Failed mounting ${FILE_SQFS} as ${mount_squash}"
		rmdir -- "${mount_squash}"
	fi
	eend ${startstat}
}

MvTbzOld() {
	[ -n "${FILE_TBZ_OLD}" ] || return 0
	test -e "${FILE_TBZ}" || return 0
	${MV_FILE_TBZ:-mv --} "${FILE_TBZ}" "${FILE_TBZ_OLD}"
}

MvSqfsOld() {
	[ -n "${FILE_SQFS_OLD}" ] || return 0
	test -e "${FILE_SQFS}" || return 0
	${MV_FILE_SQFS:-mv --} "${FILE_SQFS}" "${FILE_SQFS_OLD}"
}

Rmdir() {
	case ${1:-0} in
	[0nNfF]*)
		return 0;;
	*p*)
		rmdirparent=:;;
	*)
		rmdirparent=false;;
	esac
	[ -z "${2}" ] || ! test -d "${2}" && return
	rmdir -- "${2}" || {
		ewarn "could not remove ${2}"
		return 1
	}
	${rmdirparent} && rmdir -p -- "${2%/*}" >/dev/null 2>&1
	return 0
}

# Usage: ClearRw [keep] [action-before-first-removal]
ClearRw() {
	[ -z "${DIR_CHANGE}" ] || ! test -d "${DIR_CHANGE}" && return
	Cleardir "${DIR_CHANGE}" "${@}" || return
	Rmdir "${RM_DIR_CHANGE}" "${DIR_CHANGE}"
}

Tbzd() {
	[ -z "${FILE_TBZ}" ] && return
	MvTbzOld
	Error ${?} "Failed moving ${FILE_SQFS} -> ${FILE_SQFS_OLD}"
	${TARCMD:-tar -cjf} "${FILE_TBZ}" "${DIRECTORY}/" >/dev/null
}

Sqfsd() {
	: ${TMP_SQFS:=${TMPDIR}/${SVCNAME}.sqfs.XXXXXXXX}
	Checktemp TMP_SQFS
	${TMP_SQFS_temp} && Mktemp TMP_SQFS
	chmod -- 644 "${TMP_SQFS}"
	sqfsdaddopt='-noappend'
	sqfsdredir='>/dev/null'
	case ${VERBOSE_MODE} in
	0)	sqfsdaddopt="${sqfsdaddopt} -no-progress";;
	2)	sqfsdredir=;;
	esac
	[ -n "${COMPRESSION}" ] && \
		sqfsdaddopt="${sqfsdaddopt} "'-comp "${COMPRESSION}"'
	eval "mksquashfs \"\${DIRECTORY}\" \"\${TMP_SQFS}\" \
		${sqfsdaddopt} \${MKSQUASHFS} ${sqfsdredir}" \
		&& MvSqfsOld \
		&& mv -f -- "${TMP_SQFS}" "${FILE_SQFS}"
}

HaveMagic() {
	: ${MAGIC_FILE:=${DIR_CHANGE}/.no-save}
	test -e "${MAGIC_FILE}"
}

HaveKill() {
	: ${KILL_FILE:=${DIR_CHANGE}/.No-save}
	test -e "${KILL_FILE}"
}

CalcIgnore() {
	calcignorev=${1}
	shift
	calcignorer=${1}
	case ${calcignorer} in
	*' '*)	calcignorer="'(' ${calcignorer} ')'";;
	esac
	shift
	calcignoreb=
	for calcignorei
	do	[ -n "${calcignorer}" ] && calcignoreb=' -o '
		[ -n "${calcignorei}" ] && calcignorei="/${calcignorei}"
		calcignorer="${calcignorer}${calcignoreb}-path"
		calcignorer="${calcignorer} \"\${DIR_CHANGE}${calcignorei}\""
	done
	case ${calcignorev} in
	'@'*)	calcignorev=${calcignorev#?}
		[ -n "${calcignoreb}" ] && \
			calcignorer="'(' ${calcignorer} ')'";;
	esac
	eval ${calcignorev}=\${calcignorer}
}

NeedSquash() {
	[ -n "${DIR_CHANGE}" ] && test -d "${DIR_CHANGE}" || return
	[ -n "${DIRECTORY}" ] && test -d "${DIRECTORY}" || return
	eval "CalcIgnore @needsquashif \"\${IGNOREFILE}\" \
		${IGNORETOPFILE} \
		\"._funionfs*\" \
		.wh..wh.aufs"
	eval "CalcIgnore @needsquashid \"\${IGNOREDIR}\" \
		${IGNORETOPDIR} \
		.wh..wh.plink \
		.wh..wh.plnk \
		.wh..wh..tmp \
		.wh..wh.orph \
		.unionfs"
	eval "CalcIgnore needsquashc \"\${IGNORE}\" \
		${IGNORETOP} \
		\"\""
	[ -n "${needsquashif}" ] && \
		needsquashc="${needsquashc} -o '(' ${needsquashif} -type f ')'"
	[ -n "${needsquashid}" ] && {
		needsquashc="${needsquashc} -o '(' ${needsquashid}"
		needsquashc="${needsquashc} -type d -prune ')'"
	}
	needsquashc="find \"\${DIR_CHANGE}\" ${needsquashc} -o -exec "
	eval "${needsquashc}/bin/false '{}' '+'" && return 1
	[ -z "${IGNORETOUCH}" ] && return
	# Do the time-consuming file-comparison only if it appears necessary:
	(	d="for i
do	case \${i#\"\${DIR_CHANGE}/\"} in
${IGNORETOUCH})	c=\${DIR_SQUASH}/\${i##*/}
	if test -L \"\${i}\"
	then	test -L \"\${c}\"
	else	! test -L \"\${c}\"
	fi || break
	test -d \"\${i}\" && test -d \"\${c}\" && continue
	test -f \"\${i}\" && test -f \"\${c}\" \
	&& diff -q -- \"\${1}\" \"\${c}\" >/dev/null 2>&1 && continue;;
esac
exit 1
done
:"
		export DIR_CHANGE DIR_SQUASH
		eval "! ${needsquashc}\"\${SHELL:-/bin/sh}\" -c -- \"\${d}\" sh '{}' '+'"
	)
}

ExceedThreshold() {
	: ${THRESHOLD:=0}
	[ ${THRESHOLD} -gt 0 ] || return 0
	Normalize IGNORE_THRESHOLD || \
		IGNORE_THRESHOLD="${DIR_CHANGE}/.do-save"
	test -e "${IGNORE_THRESHOLD}" && return
	exceedthresholdn=`du -s -k -- "${DIR_CHANGE}" | cut -f 1`
	[ "${THRESHOLD}" -le "${exceedthresholdn}" ]
}

RemoveThreshold() {
	case ${IGNORE_THRESHOLD} in
	"${DIR_CHANGE}/"*)
		test -f "${IGNORE_THRESHOLD}" || return 0
		rm -- "${IGNORE_THRESHOLD}";;
	esac
}

Store() {
	if HaveKill
	then	will_kill=kill
		return 0
	else	will_kill=false
	fi
	HaveMagic && return
	ExceedThreshold || return 0
	if ! NeedSquash
	then	will_kill=keep
		return 0
	fi
	Normalize FILE_SQFS_OLD FILE_TBZ FILE_TBZ_OLD
	ebegin "Squashing ${DIRECTORY} to ${FILE_SQFS}"
	einfo "(this may take a while)"
	RemoveThreshold
	Sqfsd
	storestat=${?}
	if [ ${storestat} -eq 0 ]
	then	if [ -n "${FILE_TBZ}" ]
		then	eend ${storestat}
			ebegin "Updating archive ${FILE_TBZ}"
			einfo "(this may take a while)"
			Tbzd
			storestat=${?}
			Error ${storestat} \
				"Creating ${FILE_TBZ} failed"
		fi
		will_kill=stored
	else	Error ${storestat} "Squashing ${DIRECTORY} failed"
	fi
	eend ${storestat}
	return ${storestat}
}

IsUmounted() {
	if [ -z "${mountinfo}" ]
	then	mountinfo=`Which mountinfo` && [ -n "${mountinfo}" ] \
			|| mountinfo=:
	fi
	! "${mountinfo}" -q "${1}"
}

UmountSquash() {
	[ -n "${1}" ] && sleep ${1}
	IsUmounted "${DIR_SQUASH}" || Umount -d -- "${DIR_SQUASH}" && return
	umountstatsquash=${?}
	Umount -d -- "${FILE_SQFS}" && IsUmounted "${DIR_SQUASH}" && return
	return ${umountstatsquash}
}

UmountAll() {
	ebegin "Umounting ${DIRECTORY}"
	IsUmounted "${DIRECTORY}" || Umount -- "${DIRECTORY}"
	umountallstat=${?}
	if [ -z "${DIR_SQUASH}" ]
	then	eend ${umountallstat}
		return ${umountallstat}
	fi
	UmountSquash >/dev/null 2>&1 \
		|| UmountSquash 1s >/dev/null 2>&1 \
		|| UmountSquash 1s \
		|| umountallstat=${?}
	Rmdir "${RM_DIR_SQUASH}" "${DIR_SQUASH}"
	eend ${umountallstat}
	return ${umountallstat}
}

RmNamefile() {
	${use_name_file} || return 0
	[ -n "${NAME_FILE}" ] && rm -- "${NAME_FILE}" && return
	Error ${?} "cannot remove file ${NAME_FILE}"
}

KillBegin() {
	ebegin "${1} ${DIR_CHANGE}"
	kill_eend=eend
}

DoKill() {
	kill_eend=:
	case ${will_kill} in
	kill)
		ClearRw "${KILL_NOT}" 'KillBegin "Killing"'
	;;
	keep)
		ClearRw "${KEEP}"
	;;
	stored)
		ClearRw
	;;
	esac
	kill_stat=${?}
	Error ${kill_stat} "Clearing ${DIR_CHANGE} failed"
	${kill_eend} ${kill_stat}
	return ${kill_stat}
}

stop() {
	Check && Store && UmountAll && DoKill && RmNamefile
}

will_squash() {
	Check || return ${?}
	if HaveKill
	then	echo 1 >&2
		einfo "Have found kill-file ${KILL_FILE}"
		einfo "Will delete ${DIR_CHANGE}"
		return 0
	fi
	HaveMagic && nomagic=false || nomagic=:
	ExceedThreshold && exceed=: || exceed=false
	if ${nomagic} && ${exceed} && NeedSquash
	then	s="Will squash ${DIRECTORY} to ${FILE_SQFS}"
		echo 1 >&2
		ret=0
		einfo "Have found modified ${DIR_CHANGE}"
	else	s="Will not squash ${DIRECTORY} to ${FILE_SQFS}"
		echo 0 >&2
		ret=1
		${nomagic} && ${exceed} && einfo "No modified ${DIR_CHANGE}"
	fi
	if ${nomagic}
	then	einfo "No magic file ${MAGIC_FILE}"
	else	einfo "Have found magic file ${MAGIC_FILE}"
	fi
	if ${exceed}
	then	[ ${THRESHOLD} -gt 0 ] && \
			einfo "Exceeded threshold in ${DIR_CHANGE}"
	else	einfo "Threshold not exceeded in ${DIR_CHANGE}"
	fi
	einfo "${s}"
	return ${ret}
}

need_squash() {
	Check || return ${?}
	if NeedSquash
	then	echo 1 >&2
		if HaveMagic
		then	einfo "Have found magic file ${MAGIC_FILE}"
		else	einfo "No magic file ${MAGIC_FILE}"
		fi
		einfo "Have found modified ${DIR_CHANGE}"
		einfo "Need to squash ${DIRECTORY} to ${FILE_SQFS}"
		return 0
	fi
	echo 0 >&2
	einfo "No modified ${DIR_CHANGE}"
	einfo "Need not squash ${DIRECTORY} to ${FILE_SQFS}"
	return 1
}

have_magic() {
	Check || return ${?}
	if HaveMagic
	then	echo 1 >&2
		einfo "Magic file ${MAGIC_FILE} exists."
		return 0
	fi
	echo 0 >&2
	einfo "No magic file ${MAGIC_FILE} exists."
	return 1
}

have_kill() {
	Check || return ${?}
	if HaveKill
	then	echo 1 >&2
		einfo "Kill-file ${KILL_FILE} exists."
		return 0
	fi
	echo 0 >&2
	einfo "No kill-file ${KILL_FILE} exists."
	return 1
}

print_dir_change() {
	Check || return ${?}
	printf '%s/' "${DIR_CHANGE}" >&2
	return 0
}

print_dir_squash() {
	Check || return ${?}
	printf '%s/' "${DIR_SQUASH}" >&2
	return 0
}
